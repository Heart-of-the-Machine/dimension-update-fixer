import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '1.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modRuntime("io.github.prospector:modmenu:1.14.9+build.14")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // Select the repositories you want to publish to
    // To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
    repositories {
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    }
}

if (System.getenv("CURSE_API_KEY") != null) {
    curseforge {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = '428981'
            changelogType = 'markdown'
            changelog = file("changelogs/changelog-${project.mod_version}.md")
            releaseType = project.mod_release_type
            project.publish_minecraft_versions.split(",").toList().forEach {
                addGameVersion it.trim()
            }
            addGameVersion 'Java 8'
            addGameVersion 'Fabric'
            mainArtifact(remapJar)
//            relations {
//                requiredDependency "fabric-api"
//            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

    afterEvaluate {
        tasks.curseforge428981.dependsOn remapJar
    }
}

if (System.getenv("MODRINTH_API_KEY") != null) {
    task publishModrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
        group('Upload')
        description('Publish this mod to Modrinth')

        token = System.getenv("MODRINTH_API_KEY")
        // found using https://api.modrinth.com/api/v1/mod/dimension-update-fixer
        projectId = 'ftdODpMj'
        versionNumber = project.mod_version
        uploadFile = remapJar
        releaseType = project.mod_release_type
        changelog = file("changelogs/changelog-${project.mod_version}.md").text
        project.publish_minecraft_versions.split(",").toList().forEach {
            addGameVersion it.trim()
        }
        addLoader 'fabric'
    }
}
